INSTALLATION GUIDE
==================

This document will outline the steps needed to install this php tracker
on your website.

READ THIS ENTIRE DOCUMENT BEFORE PROCEEDING. It really helps if you know
what is in store for you.

There are 3 major sections in this document: Upgrading, Installation, and
Other Files.

UPGRADING
=========

NOTE: YOU NEED TO SET TWO NEW VARIABLES IN CONFIG.PHP TO ACCESS YOUR
ADMINISTRATION INTERFACE!! See config_sample.php for details. Any user
will be denied access to the interface until these are set.

You can upgrade your existing installation of PHPBTTracker+ and original
phpbttracker 1.5e. Upload upgrade.php to your webspace and load it in your 
browser. Be careful to READ the notes that this script displays to you!

ALWAYS BACK UP YOUR SCRIPTS AND DATABASE BEFORE UPGRADING!

There are some modifications you will have to add to config.php manually:

Add this after the line: `$GLOBALS["ip_override"]`

<Start snippet>
	/*
	 * Enable peer caching?
	 *
	 * Table caches!
	 * Lowers the load on all systems, but takes up more disk space.
	 * You win some, you lose some. But since the load is the big problem,
	 * grab this.
	 *
	 * Warning! Enable this BEFORE making torrents, or else run makecache.php
	 * immediately, or else you'll be in deep trouble. The tables will lose
	 * sync and the database will be in a somewhat "stale" state.
	 *
	 * Default: Enabled (true)
	 */
	$GLOBALS["peercaching"] = true;
<End snippet>

Add this after the line: `$GLOBALS["spdrefresh"]`

<Start snippet>
	$GLOBALS["countbytes"] = true;
<End snippet>

Add this after the line: `$GLOBALS["avgrefresh"]`

<Start snippet>
	$GLOBALS["doavg"] = true;

	/*
	 * Optimize for heavy loads?
	 *
	 * Setting this to true will disable:
	 *   -torrent average progress
	 *   -amount transferred on torrent
	 *   -torrent speed
	 *
	 * It will also enable (very slight) benefits in tracker.php.
	 *
	 * Default: normally loaded trackers (false)
	 */
	$GLOBALS["heavyload"] = false;

	/*
	 * Only allow clients that support the compact protocol to connect?
	 *
	 * This offers bandwidth savings, but be aware that peer caching
	 * HAS to be ENABLED for this to work.
	 *
	 * Default: allow all clients (false)
	 */
	$GLOBALS["compactonly"] = false;
<End snippet>

Add this after the line: `$GLOBALS["webserver_farm_session_path"]`

<Start snippet>
	/*
	 * Administration root username/password.
	 * YOU HAVE TO SET THIS; THE ADMINISTRATION SYSTEM STAYS DISABLED UNTIL THIS
	 * IS SET! It doesn't hurt to use a strong username/password combination...
	 */
	$admin_user="";
	$admin_pass="";
<End snippet>

Make sure you set the admin user and password. The admin interface won't work
until you do.

INSTALLATION
============

Requirements:
  - Working PHP environment >= 4.3.0 (ideally Apache with PHP built-in or
    working via module)*
  - Working MySQL server (>=4.0.20)

  * = It is recommended you disable directory browsing on your web server
      so apache doesn't show a directory listing if it can't find a file.
 
The installation is multiple steps. You need to:
  1. copy files to your web space
  2. decide which statistic script you want to use
  3. set up crontab
  4. do an initial configuration
  5. setting up multi-group scripts
  6. File renaming notes

1. Copy files to webspace
-------------------------

Upload these files to the web server:
  - tracker.php
  - tracker_client.php
  - tracker.css
  - funcsv2.php
  - external.php
  - maintenance.php
  - gettorrent.php
  - BDecode.php
  - BEncode.php
  - version.php
  - install.php or upgrade.php
  - makecache.php
  - statistics.php (optional, this shows realtime tracker stats.)
  - rss.php
  - rsscache.php
  - rss_conf.php
  - `index_samples` directory
  - `administration` directory

Load the install.php script in your web browser. It will
guide you through the creation of the SQL database. All you need
is the database's username and password. You may want to let your
webmaster run through this phase. 

The install script can optionally write a config.php for you, if apache 
has write access to your directory. If it fails, upload config_sample.php
to the website, rename it to config.php and edit it manually (you need to
change the database configuration).

REMEMBER: Once install.php/upgrade.php has completed successfully, REMOVE 
it from your webspace!

2. Choose a statistic script to use
----------------------------------

The index_samples script provides a few different types of example scripts.
You will need to choose one and upload it to the webspace to show the stats.
Both retired torrent samples and stat scripts are in the folder.

Here is a list with the differences of the scripts:

 Script                     Description
 ------------------------   ---------------------------------------------------
 index_sample.php           Script that shows stats and also allows sortable
 retired_sample.php         columns and such. Uses CSS for formatting; see
 tracker.css                tracker.css for an example of what needs to be
                            defined.

 basic_index_sample.php     These are really simple scripts that is not fancy
 basic_retired_sample.php   by any means. No CSS; the colors are changed in
                            the header of the files.

 dumpstats.php              Provides two functions to show stats in an
                            existing script; see the header for more info.
                            Uses CSS where needed. This relies on the script
                            calling it to have CSS defined (see tracker.css
                            for an example of what needs to be defined.)

To use the normal script, rename index_sample.php to index.php and
retired_sample.php to retired.php and upload to your webspace. There is also
a function that will dump a table if you want to integrate it with your
webpage.

Otherwise once you have decided which set of scripts to use, copy them to you 
webspace. You may need to rename them to index.php and retired.php for them to
function correctly.

index.php and retired.php have a lot of conditional statements regarding
formatting. Changing the formatting is relatively simple (all it takes is
changing something from "true" to "false", or vice versa.)

There are comments in index.php and retired.php that explain in a little more
detail, but here's what you can customize easily:
	-Tracker table colours (basic scripts)
	-Default sort method on the page
	-Whether or not the summary line is shown at the bottom of the table
	-Whether sorting by column is allowed on the page or not
	-Whether a link to retired.php (in index.php) is shown
	-Show/hide the columns available
	-Filtering by category.

See the sample scripts  for more information.

See near the bottom of this script for an example of how to set up multiple
groups. You may need to copy the index script to several places if you allow
each group to have their own folder.

Make any changes you want to the index file (if necessary) and save. 

3. Set up crontab
-----------------

Now you need to add some entries to your crontab. Specifically, there are two
scripts that are beneficial to call at regular intervals:

-external.php
-maintenance.php
-rsscache.php (if needed, see below)

external.php is the script that updates stats on external torrents. It should
be called on a regular basis (every 10 minutes or so.) There are settings in
config.php that ensures it only contacts external trackers periodically. If
you do not plan to use the external torrent function, you do not need to add
this entry; however here is an example entry for your crontab:

*/10 * * * *      php /path/to/external.php

maintenance.php is a script that removes expired bans from the tracker. All
that is needed is for this script to be called once a day or so. If you don't
plan on using the banning and client screening features, you do not need to 
add this entry; otherwise here is an entry to execute it once a day (at 1am):
**NOTE: the consistency check is now in this script! (Prior versions of
PHPBTTracker+ had it cron'd seperately.)

00 01 * * *      php /path/to/maintenance.php

rsscache.php is the caching method of the RSS feed. To set it to update the
RSS feed every 30 minutes use this entry in the crontab:

*/30 * * * *		php /path/to/rsscache.php

This part of the install is done. See the README for information on initially 
configuring your tracker.

4. Initial configuration
------------------------

  This tracker has many features to be set up. First of all, these are the
  required things that need to be set up in config.php:

  i.  Your tracker's announce url
  ii. Your database settings (if the installer script could not write config.php
      for you)

  i. Your tracker's announce url
  ------------------------------

  You need to specify your announce URL in config.php. This is the location
  of tracker.php relative to your web space (for example, 
  http://www.mysite.com/tracker/tracker.php/announce). The administration
  interface uses this to determine what torrents are yours and which are not
  yours and possibly need to be updated externally. YOU NEED TO SET THIS
  REGARDLESS, EVEN IF YOU DON'T USE THE EXTERNAL TORRENT SCANNING FEATURE.

  To do this, edit config.php. Look for the line:

  $GLOBALS["my_tracker_announce"] = "";

  and put your announce url between the quotes, as an example:

  $GLOBALS["my_tracker_announce"] = "http://www.mysite.com/tracker/tracker.php/announce";


  ii. Your database settings
  --------------------------

  If the installer script did not create a config.php script for you, you
  will need to enter them manually in the script. Rename config_sample.php
  to config.php, and open the document in the editor. Scroll to the very bottom
  and enter the username, password, and database name. If you do not have the
  database running on the same server as the web daemon, make sure you set the
  host as well.

  iii. Webserver farm configuration
  ---------------------------------

  If your webserver is part of a webserver farm (i.e. several webserver sharing
  a database) you need to configure a shared directory that ALL of the
  webservers in the farm have access to and set 
  $GLOBALS["webserver_farm_session_path"] to this path. Also enable the
  webserver farm processing by setting $GLOBALS["webserver_farm"] to true.

  IF YOU ARE PART OF A WEBSERVER FARM AND DO NOT CONFIGURE THIS YOU WILL NOT BE
  ABLE TO LOGIN TO THE ADMINISTRATION INTERFACE!

  iv. Administration interface root login info
  -----------------------------------------------------------------------------

  You need to set $admin_user and $admin_pass in config.php. Until you do, the
  scripts will not let you login. This password is considered the root user,
  once it is set you will be able to add users as needed (this is in the
  administrative interface.)

  v. Optional configuration
  -----------------------------------------------------------------------------
  These are optional features that can be configured in config.php (you can
  refer to the comments in config.php if you do not wish to read about them
  here):

  a. IP override
  b. Speed and Average torrent progress refresh rates
  c. Client filtering
  d. Scrape options
  e. Group administration
  f. Automatic correction of statistics
  g. IP banning
  h. Automatic IP banning
  i. Allow uploading of torrents
  j. External torrent scanning
  k. Disabling average progress, speed, and bytes downloaded
  l. High load optimization
  m. Enabling peer caching
  n. Allow only clients that support the compact protocol
  o. RSS Configuration
  p. Using the torrent grouping

  a. IP override
  --------------

  If you are seeding on the same LAN as the tracker, you will need to set
  $GLOBALS["ip_override"] in config.php to true to be able to seed properly.

  b. Speed and Average torrent progress refresh rates
  ---------------------------------------------------

  You can specify the interval for the speed and average torrent progress.
  Use $GLOBALS["spdrefresh"] and $GLOBALS["avgrefresh"] in config.php to do
  this.

  c. Client filtering
  -------------------

  The tracker can check client version when they connect and not allow
  old clients. This is a seperate module (tracker_client.php) and is off
  by default. To enable this set $GLOBALS["filter_clients"] to true.

  This module will have updates separately as the teams that create
  torrent clients contact the developers of PHPBTTracker+ through the
  sourceforge.net forums.

  d. Scrape options
  -----------------

  You can disable scrape temporarily by setting $GLOBALS["allow_scrape"] in
  config.php to false. This can be useful if you are expecting a large amount
  of peers for a release.

  This tracker can report additional information in the scrape output.
  This is the torrent name, average progress, torrent speed and amount
  transferred. Set $GLOBALS["scrape_extras"] in config.php to true to allow
  this. This is off by default.

  Some clients will respect a new flag in scrape that requests them to only
  scrape with a certain interval. Use $GLOBALS["scrape_min_interval"] in 
  config.php to set this.

  e. Group administration
  -----------------------

  If you intend on adding users and allowing them access to the administration
  interface, you need to set $GLOBALS["allow_group_admin"] to true in
  config.php or they will not be able to login.

  f. Automatic correction of statistics
  -------------------------------------

  This tracker can correct invalid stats when clients check in for a scrape.
  To do this, set $GLOBALS["auto_db_check_scrape"] to true in config.php. Keep
  in mind that this can be processor intensive if there are a lot of peers
  connected to the tracker!

  g. IP banning
  -------------

  This tracker allows you to ban IP addresses from being able to connect to the
  tracker. However, this tracker does not *enforce* bans by default. To enforce
  banning, set $GLOBALS["enable_ip_banning"] in config.php to true.

  NOTE: The administration interface will allow you to add bans even if they
        not enforced!

  h. Automatic IP banning
  -----------------------

  If client filtering is enabled and a client is not identifying itself, the
  tracker can IP ban automatically for a set period of time. Use
  $GLOBALS["autobanlength"] in config.php to specify the number of days the
  automatic ban should be, and $GLOBALS["allow_unidentified_clients"] in
  config.php to true to enable the automatic banning.

  NOTE: This requires client filtering to be enabled, or it will not work.

  i. Allow uploading of torrents
  ------------------------------

  First, don't forget to set your announce URL in config.php. See Section 4i
  above.

  TO WEBSERVER:

  The tracker can upload torrents to the webserver and place them in a folder,
  PROVIDED the apache child processes can have WRITE access to the folder in
  question. Also, the scripts do not remove any files from the webserver.

  To enable this, set $GLOBALS["allow_torrent_move"] to true in config.php.
  Also, you need to specify the torrent folder in $GLOBALS["torrent_folder"],
  and if you like, a maximum upload size in $GLOBALS["max_torrent_size"] (this
  value is in bytes.)

  TO DATABASE:

  The tracker can upload torrents to the database if needed. A script called
  gettorrent.php is used to retrieve the torrents. When removing torrents or
  retiring them the torrents will be removed from the database by the scripts.

  To enable this, set $GLOBALS["allow_torrent_move"] to true in config.php.
  Also, you need to specify the torrent folder in $GLOBALS["torrent_folder"],
  and if you like, a maximum upload size in $GLOBALS["max_torrent_size"] (this
  value is in bytes.) Lastly, set $GLOBALS["move_to_db"] to true.

  Once these are set, a checkbox with the option to upload to the server will
  be displayed in the add torrent screen (the default is on.) 

  j. External torrent scanning
  ----------------------------

  The tracker can allow you to add an external torrent. If you do this, you
  can mirror the torrent for someone else and if their tracker supports it,
  update the statistics to be displayed on your page. This does entail a bit
  of setting up at first.

  First of all, you need to enable adding of external torrents in config.php.
  Set $GLOBALS["allow_external_scanning"] to true, and set
  $GLOBALS["external_refresh"] to the amount of time in minutes to update
  the statistics. Every 30 minutes is sufficient. If you want the add page
  to just automatically add external torrents (it will assume this and not
  display the optional checkbox on the add screen), set
  $GLOBALS["auto_add_external_torrents"] to true.

  You should leave $GLOBALS["ext_batch_scrape"] set to it's default value
  (false). It will then only request stats for individual torrents rather
  than returning all stats for every single torrent active on the external
  tracker.

  With that out of the way, you need to explicitly allow your users to add
  external users in the user management screen of the administrative
  interface.

  The last step is to set up a crontab to call external.php every 10 minutes
  or so. See Section 3 "Setting up crontab" above for how to do this.

  k. Disabling average progress, speed, and bytes downloaded
  ----------------------------------------------------------

  To lower the load on the tracker, you can disable the average progress
  calculation, the speed calculation, and the bytes downloaded calculation.
  To disable the speed and bytes downloaded, set $GLOBALS["countbytes"] to
  false. To disable the average progress calculation, set $GLOBALS["doavg"]
  to false.

  NOTE: The index scripts will not show the affected columns if they are
  disabled!

  l. High load optimization
  -------------------------

  Under extreme loads, there is a setting that will disable the two settings
  above and make a small adjustment to the scripts to lower the load.

  Set $GLOBALS["heavyload"] to true to enable this. Affected columns on the
  index page will not be displayed.

  m. Enabling peer caching
  ------------------------

  Peer caching is new in PHPBTTracker+ 2. It essentially works by doing the
  calculations required beforehand and storing the results in the database.

  When peers check in, it is a simple operation to grab the information and
  spit it out to peers with little processing involved.

  NOTE: Compact protocol support REQUIRES this to be enabled!

  Set $GLOBALS["peercaching"] to true to enable peer caching. NOTE: if
  this was previously disabled you will need to run makecache.php to generate
  the appropriate cache tables!

  n. Allow only clients that support the compact protocol
  -------------------------------------------------------

  If you only want to allow clients that support the compact protocol, set
  $GLOBALS["compactonly"] to true in config.php. Clients that do not support
  it will be given an error message.

  The compact protocol is a significant savings in bandwidth for the tracker,
  but it not always necessary to enforce it.

  o. RSS Feed configuration
  -------------------------

  The tracker does provide a RSS feed for it's users. There are two modes of
  operation that this tracker provides: realtime and cached. Realtime of course
  is a "live" rss where the cached RSS is one that is updated periodically (using
  the cached RSS lessens the load on the database and the processor of the tracker.)

		General Settings
		----------------

		To enable RSS, set $GLOBALS["enable_rss"] to true in config.php.

		The configuration settings for the RSS feed reside in rss_conf.php. In this
		file you need to set up a few variables:

		1. To enable caching, set $enable_rss_cache to true. If set to false, live
			RSS is enabled and the links on the index pages will indicate this.
		2. You need two paths the scripts will require. Set them accordingly. (Look
			in the rss_conf.php file for comments.)
		3. There are a few items related to RSS output, such as site name, etc. Set
			them accordingly.
		4. For using live feeds, there is an array called $rss_heading. These allow
			for longer descriptions for your categories. If you have a category
			called 'foo' on your tracker, and you set $rss_heading["foo"] = "String";
			then "String" will appear in the live feed in the web browser. If no
			extra string is specified the tracker will use the category.

		Caching
		-------

		You need to crontab rsscache.php to update the cache. A recommended value is
		30 minutes. Each time this file is called it will update the cache, so set
		the update interval in your crontab.

  p. Torrent subgrouping
  ----------------------

  The tracker has the ability to let people manually sort and group torrents
  under headings (restricted to their own category.) In order to do this, they
  need permissions as a user (see User Administration in the admin interface)
  AND the index script for the group must have $advancedsort set to true.

  Note that a heading will not appear in the Advanced Sorting screen until
  a torrent has been added to it. If the sorting goes out of sync use the
  links provided in the Advanced Sorting interface to re-order it.

5. Setting up multi-group scripts
---------------------------------

Here is an attempt at trying to explain how to use the grouping.

Okay, you have 4 groups you want to track (GroupA, GroupB, GroupC, GroupD).

First you install to www.mysite.org/tracker.
When you add torrents, you specify the group as such (GroupA, GroupB, etc.)

Now you create four new folders:
	/GroupA
	/GroupB
	/GroupC
	/GroupD

And copy these files to EACH one: index.php, retired.php, tracker.css (if
needed by the script).

In index.php and retired.php, you need to change 2 lines:

First change:
+-----------------------------------------+
| require_once ("config.php");            |
+-----------------------------------------+

TO

+-----------------------------------------+
| require_once ("../tracker/config.php"); |
+-----------------------------------------+

then change:

+------------------------------------------+
| require_once ("version.php");            |
+------------------------------------------+

TO

+------------------------------------------+
| require_once ("../tracker/version.php"); |
+------------------------------------------+


Now, Go to the first folder (GroupA in this example) and change this line
in index.php and retired.php:

$defaultcategory= "main";

TO

$defaultcategory= "GroupA";

Repeat that for the other four, naming the $defaultcategory appropriately
(GroupB, GroupC, GroupD).


NOW, when people open www.mysite.org/GroupA in their browser, the files will 
only display the relevant torrents.


This concludes the installation portion. See the README for a guide on usage.
Other files included are listed below with a description of their function.

6. File renaming and moving
---------------------------

All PHP files will function properly if renamed, except for funcsv2.php,  
config.php, and the scripts for the administrative interface. NOTE: you
can rename the administration directory to whatever you like. 
Renaming these files require modifying most other .php files.

7. TorrentSpy compatability
---------------------------

If client filtering is enabled, it is possible that TorrentSpy may not be
able to connect. Otherwise, TorrentSpy will not function correctly with this 
tracker unless you use a specific announce URL. If you want it to work, 
set the announce URL to something like: 
http://www.mywebsite.com/directory/tracker.php/announce

Then TorrentSpy will be able to access the "/scrape" interface.

OTHER FILES
===========

The tracker package also includes some other scripts. Here is a list and a
description of what they do.

BEncode.php        - Used to make bencoded data streams.
BDecode.php        - The decoding compliment to BEncode.php
clientlisting.php  - A list of clients that can be scanned by the tracker.
external.php       - Script that updates external torrent stats.
maintenance.php    - Removes stale IP bans.
scrape_scan.php    - Sample script that takes a tracker's scrape URL, retrieves
                     it, decodes it and displays its output.
version.php        - The current tracker version.
makecache.php      - Create the peer caching tables.
tracker_client.php - A subset of the script, contains functions for scanning
                     clients, and is made seperate for the purpose of updating.
tracker.php        - The main script, the one that does all the work.
tracker.css        - Some of the sample statistic scripts use this (it's a
                     cascading style sheet)
funcsv2.php        - Helper script with useful functions.
administration/    - The administration interface.
index_samples/     - Sample torrent statistic scripts.

The rest is documentation and other text documents.

